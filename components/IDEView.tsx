
import React, { useState, useRef, useCallback, useEffect } from 'react';
import JSZip from 'jszip';
import { ChatMessage } from '../App';
import CodeIcon from './icons/CodeIcon';
import PlayIcon from './icons/PlayIcon';
import AIIcon from './icons/AIIcon';
import GamePreview from './GamePreview';
import ChatPanel from './ChatPanel';
import { WorkspaceType } from '../types';
import RefreshIcon from './icons/RefreshIcon';
import FullscreenIcon from './icons/FullscreenIcon';
import DownloadIcon from './icons/DownloadIcon';
import SpinnerIcon from './icons/SpinnerIcon';

declare global {
    interface Window {
        hljs: any;
    }
}

interface IDEViewProps {
    workspaceType: WorkspaceType;
    generatedCode: string;
    chatHistory: ChatMessage[];
    isLoading: boolean;
    onGenerate: (prompt: string) => void;
    onReset: () => void;
    onPositiveFeedback: (messageId: string) => void;
    onRetry: (prompt: string) => void;
}

const IDEView: React.FC<IDEViewProps> = ({ workspaceType, generatedCode, chatHistory, isLoading, onGenerate, onReset, onPositiveFeedback, onRetry }) => {
    const [isChatVisible, setChatVisible] = useState(true);
    const [isPreviewVisible, setPreviewVisible] = useState(true);
    const [refreshKey, setRefreshKey] = useState(0);
    const previewContainerRef = useRef<HTMLDivElement>(null);
    const codeBlockRef = useRef<HTMLElement>(null);

    useEffect(() => {
        if (codeBlockRef.current && window.hljs) {
            window.hljs.highlightElement(codeBlockRef.current);
        }
    }, [generatedCode]);

    const handleRefresh = () => {
        setRefreshKey(prevKey => prevKey + 1);
    };

    const handleToggleFullscreen = useCallback(() => {
        if (!previewContainerRef.current) return;

        if (!document.fullscreenElement) {
            previewContainerRef.current.requestFullscreen().catch(err => {
                console.error(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
            });
        } else {
            if (document.exitFullscreen) {
                document.exitFullscreen();
            }
        }
    }, []);

    const handleDownload = async () => {
        const zip = new JSZip();

        // Add the main game file
        zip.file("index.html", generatedCode);

        // Add package.json for local serving
        const packageJson = {
            name: "ai-generated-game",
            version: "1.0.0",
            description: "A game generated by VibeCode-X AI.",
            scripts: {
                "start": "serve .",
            },
            devDependencies: {
                "serve": "^14.2.1"
            }
        };
        zip.file("package.json", JSON.stringify(packageJson, null, 2));

        // Add vercel.json for easy deployment
        const vercelJson = {
            "rewrites": [{ "source": "/(.*)", "destination": "/index.html" }]
        };
        zip.file("vercel.json", JSON.stringify(vercelJson, null, 2));

        // Add README.md
        const readmeContent = `# AI Generated Game

This project was generated using VibeCode-X AI.

## Deployment with Vercel

This project is optimized for deployment on Vercel.

1.  Push this folder to a GitHub repository.
2.  Go to [Vercel](https://vercel.com/new) and import the repository.
3.  Vercel will automatically detect the static site and deploy it. No other configuration is needed.

## Local Development

1.  Make sure you have [Node.js](https://nodejs.org/) and npm installed.
2.  Install the local server dependency:
    \`\`\`bash
    npm install
    \`\`\`
3.  Run the server from the project's root directory:
    \`\`\`bash
    npm start
    \`\`\`
4.  Open your browser to the URL provided by the \`serve\` command.
`;
        zip.file("README.md", readmeContent);

        // Generate and trigger download
        const blob = await zip.generateAsync({ type: "blob" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = `ai-game-${workspaceType.toLowerCase()}-${Date.now()}.zip`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };


    return (
        <div className="relative flex h-screen w-screen bg-black text-gray-300 font-sans">
            {/* Chat Panel (Left) */}
             <div className={`bg-[#121212] flex flex-col flex-shrink-0 border-r border-gray-800/70 transition-all duration-300 ease-in-out ${isChatVisible ? 'w-[380px]' : 'w-0'}`}>
                {isChatVisible && <ChatPanel history={chatHistory} onSend={onGenerate} isLoading={isLoading} onReset={onReset} onPositiveFeedback={onPositiveFeedback} onRetry={onRetry} />}
            </div>
            
            {/* Main Workspace */}
            <div className="flex-1 flex flex-col overflow-hidden">
                <header className="flex-shrink-0 bg-[#121212] border-b border-gray-800/70 flex justify-between items-center px-2 h-11">
                     <div className="flex items-center gap-4">
                        <button
                            onClick={() => setChatVisible(!isChatVisible)}
                            className="p-1.5 text-gray-400 rounded-md hover:text-white hover:bg-white/10 transition-colors"
                            aria-label={isChatVisible ? 'Hide Chat Panel' : 'Show Chat Panel'}
                        >
                            <AIIcon className={`w-5 h-5 transition-colors ${isChatVisible ? 'text-blue-500' : 'text-gray-400'}`} />
                        </button>
                        <div className="flex items-center gap-3">
                            <div className="flex items-center gap-2 px-2 py-1.5 text-sm font-medium bg-black rounded-md border border-gray-800/70">
                                <CodeIcon className="w-4 h-4 text-gray-500" />
                                <span className="text-gray-400">index.html</span>
                            </div>
                            <span className="text-xs font-semibold uppercase text-blue-400 bg-blue-500/10 px-2 py-1 rounded-full">{workspaceType}</span>
                        </div>
                     </div>
                    <div className="flex items-center gap-1">
                        <button
                            onClick={handleDownload}
                            className="p-1.5 text-gray-400 rounded-md hover:text-white hover:bg-white/10 transition-colors"
                            aria-label="Download Project"
                        >
                           <DownloadIcon className="w-5 h-5" />
                        </button>
                         <button
                            onClick={handleRefresh}
                            className="p-1.5 text-gray-400 rounded-md hover:text-white hover:bg-white/10 transition-colors"
                            aria-label="Refresh Preview"
                        >
                           <RefreshIcon className="w-5 h-5" />
                        </button>
                        <button
                            onClick={handleToggleFullscreen}
                            className="p-1.5 text-gray-400 rounded-md hover:text-white hover:bg-white/10 transition-colors"
                            aria-label="Toggle Fullscreen"
                        >
                           <FullscreenIcon className="w-5 h-5" />
                        </button>
                         <button
                            onClick={() => setPreviewVisible(!isPreviewVisible)}
                            className="p-1.5 text-gray-400 rounded-md hover:text-white hover:bg-white/10 transition-colors"
                            aria-label={isPreviewVisible ? 'Hide Preview' : 'Show Preview'}
                        >
                            <PlayIcon className={`w-5 h-5 transition-colors ${isPreviewVisible ? 'text-blue-500' : 'text-gray-400'}`} />
                        </button>
                    </div>
                </header>

                <main className="flex-1 bg-black flex flex-row overflow-hidden">
                    {/* Code Pane */}
                    <div className={`h-full overflow-auto transition-all duration-300 ease-in-out font-mono text-sm bg-black ${isPreviewVisible ? 'w-1/2 border-r border-gray-800/70' : 'w-full'}`}>
                         <div className="p-4 h-full">
                            <pre className="h-full w-full"><code ref={codeBlockRef} className="language-html">{generatedCode}</code></pre>
                        </div>
                    </div>

                    {/* Preview Pane */}
                    <div ref={previewContainerRef} className={`relative h-full bg-black transition-all duration-300 ease-in-out ${isPreviewVisible ? 'w-1/2' : 'w-0'}`}>
                        {isPreviewVisible && (
                           <GamePreview key={refreshKey} htmlContent={generatedCode} />
                        )}
                    </div>
                </main>
            </div>

            {/* AI Status Notification */}
            {isLoading && (
                <div className="absolute bottom-5 left-1/2 -translate-x-1/2 bg-gray-900/80 backdrop-blur-sm border border-white/10 text-gray-200 px-4 py-2 rounded-full flex items-center gap-3 shadow-lg z-50 transition-opacity duration-300 animate-fade-in">
                    <SpinnerIcon className="w-5 h-5 text-blue-400" />
                    <span>AI is thinking...</span>
                </div>
            )}
        </div>
    );
};

export default IDEView;